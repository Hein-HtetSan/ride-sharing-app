user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

# Events
 events {
    worker_connections  1024;
}

# HTTP
http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    keepalive_timeout  65;

    # DNS resolver for proxying to external HTTPS services
    resolver 1.1.1.1 8.8.8.8 valid=300s ipv6=off;
    proxy_ssl_server_name on;

    # Gzip
    gzip  on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Upstream API
    upstream api {
        server api:8080;
    }
    
    # Upstream Web Frontend
    upstream web {
        server web:80;
    }

    # HTTP to HTTPS redirect
    server {
        listen 80;
        server_name sharelite.site www.sharelite.site api.sharelite.site;
        return 301 https://$host$request_uri;
    }

    # Main website - HTTPS
    server {
        listen 443 ssl;
        http2 on;
        server_name sharelite.site www.sharelite.site;

        # SSL Configuration
        ssl_certificate /etc/letsencrypt/live/sharelite.site/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/sharelite.site/privkey.pem;
        
        # SSL Security Settings
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;

        # Security headers
        add_header X-Served-By nginx;
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # Proxy API requests to API container via named upstream
        # Preserve the original URI
        location /api/ {
            proxy_pass http://api;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Hide any CORS headers from backend to prevent duplication
            proxy_hide_header 'Access-Control-Allow-Origin';
            proxy_hide_header 'Access-Control-Allow-Credentials';
            proxy_hide_header 'Access-Control-Allow-Methods';
            proxy_hide_header 'Access-Control-Allow-Headers';
            
            # Add CORS headers for API (nginx will be the single source)
            add_header 'Access-Control-Allow-Origin' 'https://sharelite.site' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Requested-With, Accept, Origin, Cache-Control, Pragma' always;
            
            # Handle preflight requests
            if ($request_method = OPTIONS) {
                add_header 'Access-Control-Allow-Origin' 'https://sharelite.site' always;
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Requested-With, Accept, Origin, Cache-Control, Pragma' always;
                add_header 'Access-Control-Max-Age' 86400 always;
                add_header 'Content-Length' 0 always;
                add_header 'Content-Type' 'text/plain' always;
                return 204;
            }
        }

        # Proxy all other requests to React web container
        location / {
            proxy_pass http://web/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Handle WebSocket connections if needed
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_cache_bypass $http_upgrade;
        }

        # Same-origin proxy to OSRM to avoid CORS/rate-limit issues in browser
        location /routing/osrm/ {
            proxy_pass https://router.project-osrm.org/;
            proxy_set_header Host router.project-osrm.org;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Same-origin proxy to OpenRouteService (requires API key in query by client)
        location /routing/ors/ {
            proxy_pass https://api.openrouteservice.org/;
            proxy_set_header Host api.openrouteservice.org;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # API subdomain - HTTPS
    server {
        listen 443 ssl;
        http2 on;
        server_name api.sharelite.site;

        # SSL Configuration
        ssl_certificate /etc/letsencrypt/live/sharelite.site/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/sharelite.site/privkey.pem;
        
        # SSL Security Settings
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # Redirect root to Swagger UI
        location = / {
            return 302 /swagger-ui.html;
        }

        # Proxy all requests to API backend (api.sharelite.site)
        # Preserve URI and forward to named upstream
        location / {
            proxy_pass http://api;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            
            # Hide any CORS headers from backend to prevent duplication
            proxy_hide_header 'Access-Control-Allow-Origin';
            proxy_hide_header 'Access-Control-Allow-Credentials';
            proxy_hide_header 'Access-Control-Allow-Methods';
            proxy_hide_header 'Access-Control-Allow-Headers';
            
            # CORS headers for API subdomain
            add_header 'Access-Control-Allow-Origin' 'https://sharelite.site' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Requested-With, Accept, Origin, Cache-Control, Pragma' always;
            
            # Handle preflight requests
            if ($request_method = OPTIONS) {
                add_header 'Access-Control-Allow-Origin' 'https://sharelite.site' always;
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Requested-With, Accept, Origin, Cache-Control, Pragma' always;
                add_header 'Access-Control-Max-Age' 86400 always;
                add_header 'Content-Length' 0 always;
                add_header 'Content-Type' 'text/plain' always;
                return 204;
            }
        }
    }

    # Development server block (for local testing)
    server {
        listen 80;
        server_name localhost;

        root /usr/share/nginx/html;
        index index.html index.htm;

        # Add debugging headers
        add_header X-Served-By nginx;
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
    }
}
