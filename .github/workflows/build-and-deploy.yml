name: Build and Push Docker Images

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME_PREFIX: hnhts/ride-sharing-app

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        service: [rmi, api, web]
        include:
          - service: rmi
            context: ./rmi
            dockerfile: Dockerfile
            image_name: rmi-server
          - service: api
            context: ./api
            dockerfile: Dockerfile
            image_name: api
          - service: web
            context: ./web
            dockerfile: Dockerfile
            image_name: web

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-${{ matrix.image_name }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.context }}
        file: ${{ matrix.context }}/${{ matrix.dockerfile }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: 22
        script: |
          # Ensure user is in docker group
          sudo usermod -aG docker $USER
          
          # Create application directory if it doesn't exist
          sudo mkdir -p /opt/ride-sharing-app
          sudo chown $USER:$USER /opt/ride-sharing-app
          
          # Navigate to application directory
          cd /opt/ride-sharing-app
          
          # Clone or update repository (needed for docker-compose.prod.yml)
          if [ ! -d ".git" ]; then
            git clone https://github.com/Hein-HtetSan/ride-sharing-app.git .
          else
            git pull origin main
          fi
          
          # Use sudo for docker commands if needed
          sudo docker compose -f docker-compose.prod.yml pull
          
          # Stop and remove existing containers
          sudo docker compose -f docker-compose.prod.yml down
          
          # Start with new images
          sudo docker compose -f docker-compose.prod.yml up -d
          
          # Clean up unused images
          sudo docker image prune -f
