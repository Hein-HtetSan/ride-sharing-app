name: 🚀 Build and Deploy Ride Sharing App

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_PREFIX: ghcr.io/${{ github.repository_owner }}/ride-sharing-app

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        service: [rmi, api, web]
        include:
          - service: rmi
            context: ./rmi
            dockerfile: Dockerfile
            image_name: rmi
          - service: api
            context: ./api
            dockerfile: Dockerfile
            image_name: api
          - service: web
            context: ./web
            dockerfile: Dockerfile
            image_name: web

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🏗️ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_NAME_PREFIX }}-${{ matrix.image_name }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🔨 Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.context }}
        file: ${{ matrix.context }}/${{ matrix.dockerfile }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VITE_API_URL=${{ matrix.service == 'web' && 'https://api.sharelite.site' || '' }}
          VITE_API_BASE_URL=${{ matrix.service == 'web' && 'https://api.sharelite.site/api' || '' }}
          VITE_WS_URL=${{ matrix.service == 'web' && 'wss://api.sharelite.site' || '' }}
          VITE_FRONTEND_URL=${{ matrix.service == 'web' && 'https://sharelite.site' || '' }}
          VITE_ORS_API_KEY=${{ matrix.service == 'web' && secrets.ORS_API_KEY || '' }}
          VITE_REACT_APP_GOOGLE_MAPS_API_KEY=${{ matrix.service == 'web' && secrets.GOOGLE_MAPS_API_KEY || '' }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🚀 Deploy to ShareLite server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: 22
        script: |
          set -e
          
          echo "🔄 Starting Ride Sharing App deployment..."
          
          # Ensure user is in docker group
          sudo usermod -aG docker $USER
          
          # Install curl if not available (needed for health checks)
          if ! command -v curl &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y curl
          fi
          
          # Create application directory if it doesn't exist
          sudo mkdir -p /opt/ride-sharing-app
          sudo chown $USER:$USER /opt/ride-sharing-app
          
          # Navigate to application directory
          cd /opt/ride-sharing-app
          
          # Clone or update repository (needed for docker-compose.prod.yml)
          if [ ! -d ".git" ]; then
            git clone https://github.com/Hein-HtetSan/ride-sharing-app.git .
          else
            git pull origin main
          fi
          
          # Create production environment file
          cat > .env << EOF
          POSTGRES_DB=ride_sharing
          POSTGRES_USER=postgres
          POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_HOST=database
          DB_PORT=5432
          DB_NAME=ride_sharing
          DB_USER=postgres
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          RMI_HOST=rmi-server
          RMI_PORT=1099
          IMAGE_PREFIX=ghcr.io/hein-htetsan/ride-sharing-app
          IMAGE_TAG=latest
          EOF
          
          # Login to GitHub Container Registry
          echo ${{ secrets.GITHUB_TOKEN }} | sudo docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Pull latest images with updated names
          sudo docker compose -f docker-compose.prod.yml pull
          
          # Stop and remove existing containers
          sudo docker compose -f docker-compose.prod.yml down
          
          # Start with new images
          sudo docker compose -f docker-compose.prod.yml up -d
          
          # Wait for containers to start
          echo "⏳ Waiting for containers to initialize..."
          sleep 30
          
          # Setup SSL certificates if not exists
          if [ ! -f /etc/letsencrypt/live/sharelite.site/fullchain.pem ]; then
            echo "🔒 Setting up SSL certificates..."
            sudo apt-get update && sudo apt-get install -y certbot python3-certbot-nginx
            sudo certbot --nginx -d sharelite.site -d www.sharelite.site -d api.sharelite.site --email ${{ secrets.SSL_EMAIL }} --agree-tos --non-interactive || echo "SSL setup will be done manually"
          fi
          
          # Update nginx configuration
          sudo cp nginx/nginx.conf /etc/nginx/sites-available/sharelite.site
          sudo ln -sf /etc/nginx/sites-available/sharelite.site /etc/nginx/sites-enabled/
          sudo nginx -t && sudo systemctl reload nginx || echo "Nginx config will be updated manually"
          
          # Make the check script executable and run service checks
          chmod +x scripts/check-services-prod.sh
          echo "🔍 Running service health checks..."
          if ./scripts/check-services-prod.sh; then
            echo "✅ All services are healthy!"
          else
            echo "⚠️ Some services might need more time. Checking container status..."
            sudo docker compose -f docker-compose.prod.yml ps
            echo "📋 Recent logs:"
            sudo docker compose -f docker-compose.prod.yml logs --tail=20
          fi
          
          # Clean up unused images
          sudo docker image prune -f
          
          echo "🚀 Ride Sharing App deployment completed successfully!"
          echo "🌍 Visit: https://sharelite.site"

    - name: 📊 Create deployment summary
      if: always()
      run: |
        echo "## 🚀 Ride Sharing App Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Deployment Status:** ${{ job.status == 'success' && '✅ Success' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
        echo "**Domain:** sharelite.site" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🌐 Application URLs" >> $GITHUB_STEP_SUMMARY
        echo "- **Main Site:** https://sharelite.site" >> $GITHUB_STEP_SUMMARY
        echo "- **API:** https://api.sharelite.site" >> $GITHUB_STEP_SUMMARY
        echo "- **WWW:** https://www.sharelite.site" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🐳 Docker Images" >> $GITHUB_STEP_SUMMARY
        echo "- **Web:** ghcr.io/hein-htetsan/ride-sharing-app-web:latest" >> $GITHUB_STEP_SUMMARY
        echo "- **API:** ghcr.io/hein-htetsan/ride-sharing-app-api:latest" >> $GITHUB_STEP_SUMMARY
        echo "- **RMI:** ghcr.io/hein-htetsan/ride-sharing-app-rmi:latest" >> $GITHUB_STEP_SUMMARY
