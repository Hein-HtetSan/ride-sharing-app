# Production Docker Compose for Ride Sharing Application

services:
  # PostgreSQL Database
  database:
    image: postgres:16-alpine
    container_name: ride-sharing-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-ride_sharing}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ride-sharing-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RMI Server
  rmi-server:
    image: ${IMAGE_PREFIX:-ghcr.io/hein-htetsan/ride-sharing-app}-rmi:${IMAGE_TAG:-latest}
    container_name: ride-sharing-rmi
    environment:
      DB_HOST: database
      DB_PORT: 5432
      DB_NAME: ride_sharing
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      RMI_PORT: 1099
      RMI_HOSTNAME: rmi-server
    ports:
      - "1099:1099"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - ride-sharing-network
    restart: unless-stopped

  # Spring Boot API
  api:
    image: ${IMAGE_PREFIX:-ghcr.io/hein-htetsan/ride-sharing-app}-api:${IMAGE_TAG:-latest}
    container_name: ride-sharing-api
    environment:
      RMI_HOST: rmi-server
      RMI_PORT: 1099
      DB_HOST: database
      DB_PORT: 5432
      DB_NAME: ride_sharing
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
    ports:
      - "8080:8080"
    depends_on:
      - rmi-server
      - database
    networks:
      - ride-sharing-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Web Frontend
  web:
    image: ${IMAGE_PREFIX:-ghcr.io/hein-htetsan/ride-sharing-app}-web:${IMAGE_TAG:-latest}
    container_name: ride-sharing-web
    ports:
      - "3000:80"
    depends_on:
      - api
    networks:
      - ride-sharing-network
    restart: unless-stopped

  # Nginx Reverse Proxy (for production)
  nginx:
    image: nginx:alpine
    container_name: ride-sharing-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - /var/lib/letsencrypt:/var/lib/letsencrypt:ro
    depends_on:
      - web
      - api
    networks:
      - ride-sharing-network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  ride-sharing-network:
    driver: bridge
